upstream gateway {
  server arsnova-http-gateway:8080;
}

upstream websocket {
  server arsnova-ws-gateway:8080;
}

server {
  listen $NGINX_LISTEN default_server;
  listen [::]:$NGINX_LISTEN default_server;
  server_name $ARSNOVA_HOSTNAME _;
  $NGINX_TLS_INCLUDE conf.d/${ARSNOVA_HOSTNAME}_tls.conf.include;
  $NGINX_CSP_FRAME_ANCESTORS

  # Modern client
  location / {
    proxy_pass http://arsnova-web;
    proxy_http_version 1.1;
    gzip on;
    gzip_types application/javascript text/css image/svg+xml;
    gzip_vary on;
  }

  # Public REST API
  location /api/ {
    proxy_pass http://gateway/;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $forwarded_scheme;
    proxy_set_header X-Forwarded-Port $forwarded_port;
  }

  # Public WebSocket Endpoint
  location /api/ws/ {
    proxy_pass http://websocket/ws/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $forwarded_scheme;
    proxy_set_header X-Forwarded-Port $forwarded_port;
  }

  # Include additional route configs if available
  include conf.d/*.app-routes.conf.include;
}

# Set server's scheme as fallback if request was not already forwarded.
map $http_x_forwarded_for $forwarded_scheme_fallback {
  default '';
  ''      $scheme;
}

# Use existing header or fallback.
map $http_x_forwarded_proto $forwarded_scheme {
  default $http_x_forwarded_proto;
  ''      $forwarded_scheme_fallback;
}

# Extract port from request's Host header
map $http_host $request_port {
  default     '';
  ~:([0-9]+)$ $1;
}

# Set request's port as fallback if request was not already forwarded.
map $http_x_forwarded_for $forwarded_port_fallback {
  default '';
  ''      $request_port;
}

# Use existing header or fallback.
map $http_x_forwarded_port $forwarded_port {
  default $http_x_forwarded_port;
  ''      $forwarded_port_fallback;
}
