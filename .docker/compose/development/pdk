#!/bin/bash
PATH=$HOME/.config/Code/User/globalStorage/ms-vscode-remote.remote-containers/cli-bin/:$PATH
COMMAND=$1

COMPOSE_DIR=$(dirname $(readlink -f $0))
LOCAL_COMPOSE_DIR=$COMPOSE_DIR
export ROOT_DIR=$(readlink -f $COMPOSE_DIR/../../..)
ENV_FILES=""
BASE_COMPOSE_FILE_ARGS=""
cd "$COMPOSE_DIR"

if [ -z "$PDK_COMPOSE_FILE" ]; then
  export PDK_COMPOSE_FILE="$COMPOSE_DIR/.compose.yaml"
fi

source project-mapping-vars.sh
if [ -n "$ADDITIONAL_COMPOSE_DIR" ]; then
  if [ ! -d "$ADDITIONAL_COMPOSE_DIR" ]; then
    echo "ADDITIONAL_COMPOSE_DIR=$ADDITIONAL_COMPOSE_DIR is not a directory."
    exit 1
  fi
  LOCAL_COMPOSE_DIR=$ADDITIONAL_COMPOSE_DIR
  source "$ADDITIONAL_COMPOSE_DIR/project-mapping-vars.sh"
fi
export LOCAL_ROOT_DIR=$(readlink -f $LOCAL_COMPOSE_DIR/../../..)

init_gitmodules() {
  REPLY=
  gitmodules=$(cat "$ROOT_DIR/.gitmodules" | grep -E '^\s+path' | sed -E 's/^\s+path\s+=\s+//')
  for gitmodule in $gitmodules; do
    if [ ! -e "$ROOT_DIR/$gitmodule/.git" ]; then
      if [ -z "$REPLY" ]; then
        read -p "Some Git submodules have not been initialized. Initialize now? (Y/n) "
      fi
      if [ -n "$REPLY" ] && [ "$REPLY" != "y" ] && [ "$REPLY" != "Y" ]; then
        return
      fi
      git submodule update --init --recursive "$ROOT_DIR/$gitmodule"
    fi
  done
  git submodule foreach 'if [ -f .pre-commit-config.yaml ]; then pre-commit install; fi' >/dev/null
}

load_prod_config() {
  config_dir=$(readlink -f "$1")
  while read config_name; do
    if [ -f "$config_dir/../production/$config_name.env" ]; then
      ENV_FILES="$ENV_FILES $config_dir/../production/$config_name.env"
    fi
    if [ -f "$config_dir/../production/$config_name.compose.yaml" ]; then
      BASE_COMPOSE_FILE_ARGS="$BASE_COMPOSE_FILE_ARGS -f $config_dir/../production/$config_name.compose.yaml"
    fi
  done <"$config_dir/config-list"
  COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS $BASE_COMPOSE_FILE_ARGS"
}

load_dev_config() {
  config_dir=$(readlink -f "$1")
  while read config_name; do
    if [ -f "$config_dir/$config_name.env" ]; then
      ENV_FILES="$ENV_FILES $config_dir/$config_name.env"
    fi
    if [ -f "$config_dir/devcontainer.$config_name.compose.yaml" ]; then
      COMPOSE_FILE_ARGS="$COMPOSE_FILE_ARGS -f $config_dir/devcontainer.$config_name.compose.yaml"
    fi
  done <"$config_dir/config-list"
}

# Load environment variables from file without replacing existing values.
merge_env() {
  VAR_FILTER=`cat "$LOCAL_COMPOSE_DIR/.env" | grep -v ^# | sed -E 's/=.*$//g' | sed -E -z -e "s/\n*$//g" -e "s/\n+/|/g"`
  CURRENT_ENV=`env | grep -E "$VAR_FILTER"`
  set -a
  . "$LOCAL_COMPOSE_DIR/.env"
  set +a
  # Restore env (priortize passed env vars over loaded env vars)
  export $CURRENT_ENV >/dev/null
}

# Expects argument to be either a project path or service name. Determines path
# from service name and vice versa. Sets PROJECT and SERVICE variables
# accordingly.
set_project_variables() {
  project_or_service=${1%/}
  if [ -n "${PROJECT_DIRS[$project_or_service]}" ]; then
    PROJECT=${PROJECT_DIRS[$project_or_service]}
    SERVICE=$project_or_service
  else
    for svc in "${!PROJECT_DIRS[@]}"; do
      if [ "$project_or_service" = "${PROJECT_DIRS[$svc]}" ]; then
        PROJECT=$project_or_service
        SERVICE=$svc
      fi
    done
  fi
}

# Determine the image tags using the following priority:
# 1. *_TAG environment variables (shell env -> local.env -> *.env)
# 2. next
determine_image_tags() {
  echo Image tags:
  for project in "${!TAG_VARS[@]}"; do
    if [ -z "${!TAG_VARS[$project]}" ]; then
      export ${TAG_VARS[$project]}=next
    fi
    echo "$project -> ${!TAG_VARS[$project]}"
  done
}

prompt_image_tags() {
  echo Prompting for tag names to use with Docker Compose...
  for project in "${!TAG_VARS[@]}"; do
    if [ -z "${!TAG_VARS[$project]}" ]; then
      export ${TAG_VARS[$project]}=next
    fi
    read -p "$project: [${!TAG_VARS[$project]}] " tag
    if [ -n "$tag" ]; then
      sed -i -n -e "/^${TAG_VARS[$project]}=/!p" -e '$a'"${TAG_VARS[$project]}=$tag" "$LOCAL_COMPOSE_DIR/local.env"
    fi
  done
}

update_config() {
  echo Updating configuration for Docker Compose...
  if [ ! -f "$LOCAL_COMPOSE_DIR/local.env" ]; then
    echo "# Custom environment configuration overrides" > "$LOCAL_COMPOSE_DIR/local.env"
  fi
  if [ ! -f "$LOCAL_COMPOSE_DIR/local.compose.yaml" ]; then
    echo -e "# Custom Docker Compose configuration overrides\nservices: {}" > "$LOCAL_COMPOSE_DIR/local.compose.yaml"
  fi
  echo "# GENERATED - DO NOT EDIT - RUN $0 $1 TO UPDATE" > "$LOCAL_COMPOSE_DIR/.env"
  cat $ENV_FILES devcontainer.env "$LOCAL_COMPOSE_DIR/local.env" | grep -v ^# | tac | awk -F "=" '!a[$1]++' | tac >> "$LOCAL_COMPOSE_DIR/.env"
  merge_env
  determine_image_tags
  echo "# GENERATED - DO NOT EDIT - RUN $0 $1 TO UPDATE" > "$PDK_COMPOSE_FILE"
  docker compose --project-directory "$LOCAL_COMPOSE_DIR" \
    $COMPOSE_FILE_ARGS \
    -f "$LOCAL_COMPOSE_DIR/local.compose.yaml" \
    config >> "$PDK_COMPOSE_FILE"
}

build() {
  if [ ! -f "$PDK_COMPOSE_FILE" ]; then
    update_config
  fi
  pull_devcontainer_base_images
  echo Building Devcontainers...
  shift 1
  docker compose -f "$PDK_COMPOSE_FILE" build $@
}

pull_devcontainer_base_images() {
  echo Pulling base images for Devcontainers...
  for project in "${PROJECT_DIRS[@]}"; do
    dev_dockerfile="$LOCAL_ROOT_DIR/$project/.devcontainer/Dockerfile"
    if [ -f "$dev_dockerfile" ]; then
      devimg=$(cat "$dev_dockerfile" | grep -E "^FROM" | grep "devcontainer" | sed -E "s/^FROM //")
      devimgs=$(printf "$devimgs\n$devimg" | uniq -u)
    fi
  done
  devimgs=($devimgs)
  for devimg in "${devimgs[@]}"; do
    docker pull "$devimg"
  done
}

seed_gradle_ro_cache() {
  echo Seeding Gradle read-only dependency cache...
  mkdir -p "$LOCAL_ROOT_DIR/.gradle"
  docker run --rm \
    -v "$LOCAL_ROOT_DIR:/project" \
    -v "${COMPOSE_PROJECT_NAME}_gradle-ro-dep-cache:/root/.gradle-ro-dep-cache" \
    -v "${COMPOSE_PROJECT_NAME}_gradle-ro-dep-cache-home:/root/.gradle" \
    -v "${COMPOSE_PROJECT_NAME}_gradle-ro-dep-cache-local:/project/.gradle" \
    -w /project \
    -e GRADLE_RO_DEP_CACHE=/root/.gradle-ro-dep-cache \
    -e GRADLE_OPTS=-Dorg.gradle.internal.launcher.welcomeMessageEnabled=false \
    -it \
    eclipse-temurin:21-jdk-alpine \
    sh -c './gradlew getDeps --continue --no-daemon && cp -a /root/.gradle/caches/modules-2 /root/.gradle-ro-dep-cache/ && rm -f /root/.gradle-ro-dep-cache/modules-2/modules-2.lock /root/.gradle-ro-dep-cache/modules-2/gc.properties'
}

start_dev_server() {
  if [ -f "$LOCAL_ROOT_DIR/$PROJECT/build.gradle.kts" ]; then
    docker compose -f "$PDK_COMPOSE_FILE" restart "$SERVICE"
    docker compose -f "$PDK_COMPOSE_FILE" exec -it -u dev "$SERVICE" sh -c "/post-attach.sh && trap '{ echo; echo \"Starting production server...\"; }' INT && cd /workspace/$PROJECT && ../gradlew bootRun $*; exit"
  else
    echo "Service $SERVICE is not supported."
  fi
}

migrate_postgresql_data() {
  set -e
  postgresql_migration_image=tianon/postgres-upgrade
  postgresql_path=/var/lib/postgresql
  postgresql_volume_prefix="${COMPOSE_PROJECT_NAME}_postgresql_data_"
  postgresql_target_version=$(echo $POSTGRESQL_TAG | cut -d . -f 1)
  if [ -z "$postgresql_target_version" ]; then
    return
  fi
  for postgresql_volume in $(docker volume ls -q | grep $postgresql_volume_prefix); do
    postgresql_version=$(docker run --rm -v "$postgresql_volume:/mnt" busybox cat /mnt/PG_VERSION)
    if [ -z "$postgresql_version" ]; then
      echo "Failed to detect current PostgreSQL version for volume $postgresql_volume."
      exit 1
    fi
    if [ "$postgresql_version" = "$postgresql_target_version" ]; then
      continue
    fi
    docker compose -f "$PDK_COMPOSE_FILE" down
    postgresql_user=arsnova${postgresql_volume#"$postgresql_volume_prefix"}
    echo "Running migration for volume $postgresql_volume..."
    docker compose pull "$postgresql_migration_image:$postgresql_version-to-$postgresql_target_version"
    echo Adjusting directory layout for migration...
    docker run --rm -v $postgresql_volume:$postgresql_path -w $postgresql_path alpine sh -c "export src=\`echo *\` && mkdir -p $postgresql_version/data && echo mv \$src $postgresql_version/data && mv \$src $postgresql_version/data && mkdir -p $postgresql_target_version/data"
    echo Running migration...
    docker run --rm -v $postgresql_volume:$postgresql_path -e PGUSER="$postgresql_user" -e POSTGRES_INITDB_ARGS="-U $postgresql_user" "$postgresql_migration_image:$postgresql_version-to-$postgresql_target_version" --link
    echo Restoring directory layout...
    docker run --rm -v $postgresql_volume:$postgresql_path -w $postgresql_path alpine sh -c "mv $postgresql_target_version/data/* ./ && rm -rf $postgresql_version $postgresql_target_version && printf \"\\nhost all all all md5\\n\" >> pg_hba.conf"
    echo "Migration for volume $postgresql_volume completed."
  done
  set +e
}

if ! command -v git &> /dev/null; then
  echo ERROR: Git is not installed.
  exit 1
fi

if ! command -v docker &> /dev/null; then
  echo ERROR: Docker Engine is not installed.
  echo
  echo https://docs.docker.com/engine/install/
  exit 1
fi

if ! docker compose &> /dev/null; then
  echo ERROR: Docker Compose v2 is not installed.
  echo
  echo https://docs.docker.com/compose/install/compose-plugin/
  echo
  echo On Debian-based systems:
  echo apt install docker-compose-plugin
  exit 1
fi

if command docker-compose &> /dev/null && docker-compose --version | grep "docker-compose version" &> /dev/null; then
  echo ERROR: Legacy Docker Compose v1 is installed.
  echo
  echo Please remove this version to avoid issues.
  exit 1
fi

if ! command -v code &> /dev/null; then
  echo ERROR: Visual Studio Code is not installed.
  echo
  echo https://code.visualstudio.com
  exit 1
fi

if ! code --list-extensions | grep ms-vscode-remote.remote-containers &> /dev/null; then
  code --install-extension ms-vscode-remote.remote-containers
fi

if ! command -v pip &> /dev/null; then
  echo ERROR: pip is not installed.
  echo
  echo On Debian-based systems:
  echo apt install pip
  exit 1
fi

if ! command -v pre-commit &> /dev/null; then
  pip install pre-commit
fi

if [ -f .pre-commit-config.yaml ]; then
  pre-commit install >/dev/null
fi

load_prod_config "$COMPOSE_DIR"
if [ -n "$ADDITIONAL_COMPOSE_DIR" ]; then
  load_prod_config "$ADDITIONAL_COMPOSE_DIR"
fi
load_dev_config "$COMPOSE_DIR"
if [ -n "$ADDITIONAL_COMPOSE_DIR" ]; then
  load_dev_config "$ADDITIONAL_COMPOSE_DIR"
fi

init_gitmodules
if [ -n "$2" ]; then
  set_project_variables "$2"
fi

case $COMMAND in
  update|u)
    shift 1
    if [ -z "$1" ]; then
      echo Updating Git repository...
      git pull
    fi
    update_config
    echo Updating base images for Devcontainers...
    docker compose --project-directory "$LOCAL_COMPOSE_DIR" \
      $BASE_COMPOSE_FILE_ARGS \
      pull $@
    build $@
    seed_gradle_ro_cache
    migrate_postgresql_data
    ;;
  update-config)
    update_config
    ;;
  tags|t)
    update_config
    prompt_image_tags
    ;;
  open|o)
    if [ -n "$PROJECT" ] && [ -d "$LOCAL_ROOT_DIR/$PROJECT" ]; then
      update_config
      devcontainer open "$LOCAL_ROOT_DIR/$PROJECT"
    else
      echo ERROR: Invalid project path or service name
      exit 1
    fi
    ;;
  run|r)
    update_config
    echo Starting Devcontainers...
    shift 1
    docker compose -f "$PDK_COMPOSE_FILE" up $@
    ;;
  build|b)
    update_config
    build
    ;;
  logs|l)
    if [ ! -f "$PDK_COMPOSE_FILE" ]; then
      update_config
    fi
    shift 1
    docker compose -f "$PDK_COMPOSE_FILE" logs $@
    ;;
  compose|c)
    if [ ! -f "$PDK_COMPOSE_FILE" ]; then
      update_config
    fi
    shift 1
    docker compose -f "$PDK_COMPOSE_FILE" $@
    ;;
  dev-server|d)
    if [ -z "$SERVICE" ]; then
      echo Missing or invalid service arg.
      exit 1
    fi
    if [ ! -f "$PDK_COMPOSE_FILE" ]; then
      update_config
    fi
    shift 2
    start_dev_server $@
    ;;
  *)
    echo Usage:
    # PDK_CMD can be set by a wrapper script
    if [ -z "$PDK_CMD" ]; then
      PDK_CMD=$0
    fi
    echo "    $PDK_CMD run              Start Devcontainers for all services"
    echo "    $PDK_CMD dev-server       Start a development server"
    echo "    $PDK_CMD open <project>   Open project in Devcontainer with Visual Studio Code"
    echo "    $PDK_CMD tags             Set the image tags of projects to use with Docker Compose"
    echo "    $PDK_CMD logs             Show logs or the log for a specific service"
    echo "    $PDK_CMD compose          Execute a Docker Compose command"
    echo "    $PDK_CMD update           Update Git repositories, Docker Compose configuration, Devcontainers and the Gradle dependency cache"
    echo "    $PDK_CMD update-config    Update the configuration for Docker Compose"
    echo "    $PDK_CMD build            (Re-)build Devcontainers"
    ;;
esac
